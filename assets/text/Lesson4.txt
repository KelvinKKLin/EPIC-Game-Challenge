./assets/images/Blackboard.jpg%%./assets/images/Sensei_Happy.png%%./assets/images/Sensei.png%%Professor Sensei%%Welcome, young one, to another lesson in Python programming.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Happy.png%%./assets/images/Sensei.png%%Professor Sensei%%Last time, we learned how to manipulate ints and floats. Today, we will learn how to manipulate strings.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Happy.png%%./assets/images/Sensei.png%%Professor Sensei%%Let's get started.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%The first thing we have to learn is string concatenation. That is, adding strings.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Quite simply, when ever you add two strings, Python simply joins the two strings together. So "Hello" + "World" would return "HelloWorld".%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Please note that spaces are not added between strings when you add them. So, if you wanted "Hello World", you would need to write "Hello " + "World".%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Simple enough?%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Now then, strings are a collection type. That means that you can access each individual elements of a string, that is, splicing.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%So, to splice a string, simply type the name of the string, followed by a square bracket, the first index of your desired string, a colon, and then the second index of your desired string.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%If I had name = "Sensei" and I wanted the string "Sense", I would simply type name[0:5].%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Likewise, if I had name = "Sensei" and I wanted "ensei", I would type name[1:6].%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%So, if I had name = "Sensei" and I wanted "ens", how would I get that string?%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Did you say name[1:4]?%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Well, if you did, you are correct! Great work!%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Now, there is just one more thing you need to know about splicing strings. That is, that if you wanted to take the an entire string up to a certain point, or if you wanted to take the entire string after a certain point, you could use the colon operator.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%That is, for name = "Sensei", if I wanted "nsei", I could simply type name[2:]. If I wanted "Sense", I could simply type [:5].%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Be wary, young one, for a string of length n, the first index of the string (the first character in the string) is index 0, and the last index of the string is index n-1.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Regarding the length of strings, to determine the length of a string, use the len() function. Put the string you want to determine the length of inside the bracket.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%That is, if I had name = "Sensei", to find out the length of name, I would use len(name), which would return 6.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%To iterate through each character of a string, simply use a for loop.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%That is, if I wanted to print each character in "Sensei", I would use a for loop with the header for character in "Sensei":%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Followed by: print character%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Try it!%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Now then, young one, with your newfound knowledge, we are now ready to learn about file processing.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Very often, you would want to read and write information to files. This allows your data to be stored even after your program terminates.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%And guess what? Files are stored as strings, which you just learned how to manipulate.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%So, the first step to file processing is to tell Python that you have a file. To do that, you have to "open" a file, and save that to a variable.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%For instance, I could write: myFile = open("TextFile.txt", "r") and this would open a file called TextFile.txt located in the same directory as my Python script.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%If your file is outside the directory of your Python script (that is, it is located in a different folder), then you would have to specify the full path of the file.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%But worry not! If you are learning Python for an engineering class, chances are, you won't have to ever specify the full path.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Now young one, recall the line newFile = open("TextFile.txt", "r"). We now know know what the TextFile.txt does, but what about the "r"?%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%With Python, you have to tell the computer whether you want to read the file or write to the file. In most cases, you don't want to do both. So, logically, "r" stands for read whereas "w" stands for write.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Pop quiz: how would I write to myFile?%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Did you answer myFile = open("TextFile.txt", "w")?%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%If you did, you are correct!%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Now, let's focus on reading the file first. There are 3 ways you can read the file.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%1) You can use the read() operation. This returns the contents of the file as a single large string (which you have to store the value of in a variable).%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%So if I wanted the contents of myFile in a string, I could write: contents = myFile.read()%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%The reason why we wrote myFile.read() instead of just read() is because we have to tell Python what it needs to read, otherwise, it isn't smart enough to know what it should read.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Now, the second way to read a file is to use the readLine() function, which returns a single line of the text as a string. This function goes down the file each time it's called, line by line. That is, the first time it is called, it will return the first line of the text file. The second time it is called, it will return the second line of the text file.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Please note, the readLine() function can only read down a file, it cannot go back up a file.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Finally, you can get a list of strings of all the lines in the file using the readLines() function. This reads every line of the file, and returns each line as an element of a list. That is, you get a list of strings, where each index of the list corresponds to the corresponding index of the text file.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Now, let's look at writing to files. Writing is much simpler than reading. %%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%All you do is use the write() function, like this: myFile.write("Text here")%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%The write() function writes to your file line by line.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Please note that whenever you write to a file, the old contents of the file is deleted, and overwritten by the new contents.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Now, once you have read or written to your file, it is crucial to close it. This allows you to preform the other operation (if you are reading, closing the file allows you to open it again for writing, and vice versa), and it prevents errors from occuring if your program tries to terminate.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%To close the file, simply use: myFile.close().%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Please note, for any of the above examples, myFile can be changed to any variable name you desire.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Now, young one, you know everything you need to know about file processing. Before we end for today, however, there is still some theory that we need to go over. This could come in handy if you're ever caught doing a multiple choice test about strings!%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Text in Python, is stored in 2 different ways: ASCII and Unicode.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%ASCII, short for American Standard Code for Information Interchange, is a numerical representation of symbols, characters, and numbers used in English. This includes all of the alphabets, the roman numerals, symbols such as @ and #, spaces, as well as tabs, new lines, and other invisible elements.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%All in all, there are 128 different ASCII elements, which are, once again, based off the ENGLISH language.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%So now you might ask, how are foreign languages like Chinese or Japanese displayed?%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Foreign languages are displayed using another system known as Unicode.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Unicode is a way of representing writing systems on the computer. There are over 100000 symbols in unicode, covering over 100 language systems (including English).%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Usually, if you are taking an introductory Python class, you will be manipulating ASCII characters and not unicode characters.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%So, to convert a character (a string with only one character) into its ASCII equivalent, you could use the built-in function ord(). That is, if I wanted the ASCII numerical equivalent of "A", I would type ord("A") which would return 65%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Nutral.png%%./assets/images/Sensei.png%%Professor Sensei%%Likewise, if I wanted the string equivilent of an ASCII number, I could use the function chr(). That is, if I wanted to know what 65 ASCII was, I would use chr(65) which would return "A".%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Happy.png%%./assets/images/Sensei.png%%Professor Sensei%%And that, young one, concludes our lesson for strings. You have done well today learning about string manipulation, file processing, and representation of strings on a computer.%%0%%0
./assets/images/Blackboard.jpg%%./assets/images/Sensei_Happy.png%%./assets/images/Sensei.png%%Professor Sensei%%Until next time!%%0%%0
