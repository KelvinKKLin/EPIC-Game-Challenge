Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Welcome back, young one.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Today, we are going to look at an important concept in computing: simulation and design.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%At this point, you have all the tools you need to write some pretty powerful programs.%%0%%0
Blackboard.jpg%%Sensei_Sad.png%%However, one must know that with great power comes great responsibility.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%So, we are going to learn how to design great programs today in order to reflect the real world. Are you ready?%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%The first thing we're going to look at is called Top Down Design. The essence of top down design is to start with a big problem, and the reduce that problem into smaller problems until they can be solved. Each problem is reduced until the individual problems are so easy to solve, that a white belt programmer code it!%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Now, as a black belt programmer, you wouldn't want to lose to those white belts, would you?%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, top down design leads us to a very interesting concept in computing: seperation of concerns. That is, seperating the program into different concerns or problems to tackle, so that we can divert all our attention to that problem, instead of having to juggle many problems at once. Each of our sub-problems can be represented in a structure chart. It's like an objective tree, where the lower nodes of the chart denote sub-categories of the nodes above.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, there are steps that you need to take in order to implement top-down design.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%First, define your problem, and break that problem up into smaller sub-problems, until they are trivial to solve.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Next, implement a code-solution for each of the sub-problems.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Finally, write your final program, using the snippits of code you wrote to solve each of the sub-problems. Repeat until you have your working program.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Now, young one, what comes around must go around.%%0%%0
Blackboard.jpg%%Sensei_Sad.png%%Sensei.png%%Professor Sensei%%Therefore, we will now learn about the opposite of Top-Down design, known as Bottom-Up Implementation.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Bottom-up implementation is where you code small blocks of code at a time, testing them, and then using these blocks of code to build your final program.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%The beauty of bottom-up design is that you can be assured the solutions to your sub-problems are all functional by the time you code your final program.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Very quickly, I will now go over 2 more design techniques.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Prototyping is where you start off with a "semi-solution" to your program, and then you add features to it until you get a fully functional program. %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Repeated use of prototyping leads to sprial development, where you repeat a process (like the Waterfall process discussed in lecture), over and over again, until you arrive at a final product. Note also, young one, that although the waterfall process is the ideal software development process, it is rarely used in the real world, and it is always used in tandem with the spiral development process.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Finally, before we end our lesson for today, I would like to add that there is no single way to approach design. It is as much an art as a science. You can't fully learn how to design without having designed anything yourself. That is, go out, and have some fun coding!%%0%%0
