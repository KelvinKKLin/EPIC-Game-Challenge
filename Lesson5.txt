Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Welcome, young one, to another lesson in Python.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Today, we will be looking at objects and graphics.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%If you havent already, go download the Graphics library from John Zelle's website! The link is in your textbook.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Anyway, let us begin.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%So up until now, you have been programming text based programs, which are, in a way, lacking a modern user interface.%%0%%0
Blackboard.jpg%%Sensei_Sad.png%%Sensei.png%%Professor Sensei%%Most users would not want to use a solely text based program, as it would be difficulyt to follow, and boring to use.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Luckily, with the graphics library you downloaded, you can easily create graphical user interfaces, or GUIs, using an object oriented approach.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, what are objects?%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Objects are essentially a programming entity, or an active data type, that encapsulates both data, as well as operations.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%They could resemble real life objects, or abstract ideas.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%For instance, you could have a student object that repersents a student, or you could have a TextProcessor object that would process text in a variety of ways.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%A good way to remember this is that any and all nouns can be converted into objects in programming.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%In order to create a GUI, you first need to import the graphics library.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%You can do so by typing: import graphics%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%The import statement tells Python that you wish to use code that someone else wrote in your program. This is good programming practice because it allows you to avoid reinventing the wheel.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, let's create a windows object. %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%To do so, type win = graphics.GraphWin()%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%This creates a GraphWin object and saves it to a variable called win. You can replace win with any variable you want.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%The GraphWin object is used to display items on the screen.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%By default, the GraphWin window is 200x200 pixels wide.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%You can adjust this by putting numbers in the brackets that follow GraphWin.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%It works like this: win = GraphWin(title, width, height)%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%So if I wanted to create a graphics window with the label "For I in Python" with a width of 250 pixels, and a height of 500 pixels, I would type win = GraphWin("For I in Python", 250, 500).%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now that we have a window, let's close it.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%To do so, type win.close().%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%It is always a good idea to close your window after you use it. Otherwise, it would consume your computer's memory in the background, as it needlessly continues to run.%%0%%0
Blackboard.jpg%%Sensei_Sad.png%%Sensei.png%%Professor Sensei%%It could also cause problems if your program attempts to terminate when your window isn't close. So like file processing, always remember to close your window!%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%So, I've mention that the default size of the window is 200x200 pixels. Now, let me talk a little about the coordinate system.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%It is a little different than your standard Cartesian plane.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%The origin of the window is on the top left hand corner. The positive x direction is to the right, and the positive y direction is to the bottom. That is, the y coordinates increase as you go down the screen.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Keep that in mind when you're drawing graphics onto your window.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%To change the coordinates to a more intuitive grid, you can use the .setCoords command.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%To use it, simply type the name of your graphics window, and then .setCoords(x_lowerLeftCorner, y_lowerLeftCorner, x_upperRightCorner, y_upperRightCorner)%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%So to create a window with 0,0 at the bottom left hand corner, and 100,100 on the upper right hand corner, I would use the following command: win.setCoords(0, 0, 100, 100)%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now that we have a functional window, you could be wondering what kind of objects you can put onto your window?%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Well, there's a whole list of objects that you can put onto your window, including points, lines, rectangles, circles, and text.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Although those are all slightly different, they are all ultimately different, and thus, all operate under similar commands.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Let's look at this in detail!%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%First, all objects are created by typing the object's name, and then brackets with parameters or arguements denoting additional information required to create that object. This is usually assigned to a variable.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%For instance, if I wanted to create a circle object, I would use the command circ = Circle(50, 5), where the first arguement is the center point of the circle, and the second arguement is the radius in pixels.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%When an object is created, it invokes the object's constructor, which creates the object.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Also, a good way to determine the number of objects created is to count the number of words with capital letters followed by an open bracket in a block of code.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, after you create the object, you would want to do things with it. Once again, and object is not only an encapsulation of data, but also operations.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%To use an objects operations, also known as functions or methods, simply call the object's name (that is, the name of the variable containing the object), and then a period followed by the operation.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%That is: <objectName>.<methodName>(<parameter1>...)%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Or, if I wanted to draw my previous circle on the screen, I would use circ.draw(win), where .draw is the operation, and win is a parameter. %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%As a side note, the draw method places the object onto the arguement, which is our window.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%To see more methods, please refer to chapter 5 of your textbook.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Now, one more thing before we end for today. Now that we have graphics on our screen, let's make it interactive!%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%We can make our windows accept both mouse clicks, and textual input.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%To accept mouse clicks, simply use graphWin.getMouse(). This operation not only recieves a mouse click, but it also tells you the x and y coordinate clicked, in the form of a point. That is, if you assign the results of graphWin.getMouse() to a variable, p, you can access the values of the location clicked by using p.getX(), and p.getY().%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Getting texual input is a bit more complicated. %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%To get textual input, you first need to create an Entry object. %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%This creates a text field where user can enter text into the box.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%You can use the .setText() method to set default text.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%You can also use the .getText() method to get new text, entered by the user.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%With this knowledge, young one, you are now ready to tackle the world of GUIs.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Go out, and create some user friendly programs!%%0%%0
