Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Welcome back, young one, to another lesson in Python programming.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Up until now, you have been making programs with a linear flow. %%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Today, we will learn how to make programs that can execute different blocks of code depending on the different states of the program.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%That is, we will learn about if statements.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, sequencing the program is a fundamental concept in programming; however, just as important is the ability to skip code with decision structures.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, computers, unlike humans, are simple entities.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%They can only make simple decisions based on simple conditions.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%In other words, they can only make decisions based on basic yes-or-no questions.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, in programming, an if statement works as follows: a question (also known as a condition) is evaluated, and if the answer is yes, then the program executes the block of code within the if statement's body. Otherwise, that block of code is skipped.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, this concept is such a fundamental concept in computing, that it can be argued that a programming language only needs to consists of variables, and if statements. Everything else can be implemented from those two concepts alone.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, the header of an if statement takes the following form: if <<condition>>:%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Once again, the condition is simply a yes-or-no question.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%However, the computer isn't smart enoungh to answer human yes-or-no questions, like "Do you want a hamburger", so we have to ask these questions in terms of Python.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Common questions you could ask is "Is a certain value of x greater than y?" or "Is y less than or equal to x?"%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%In Python, that is x > y and y <= x.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now signs such as < and >= are known as operators. There are four of them that you should know.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%< means less than, <= means less than or equal to, > means greater than, and >= means greater than or equal to.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, you can also ask the question is x equal to y.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%But how would you code it in Python?%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%x = y?%%0%%0
Blackboard.jpg%%Sensei_Sad.png%%Sensei.png%%Professor Sensei%%No!%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%x = y assigns x the value of y. %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%In other words, = is an assignment operator, not a comparison operator.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%To ask if x is equal to y in Python, you need to use 2 equal signs. That is, x == y.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Finally, you can also ask if x is not equal to y. To do that, you need to use an exclimatation mark. That is: x != y%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Interesting fact, the exclimation mark is sometimes refered to as a "bang" in programming.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Hence, a complete if statement header would look like this: if x == y:%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Additionally, you can put any boolean statement as the condition, however, we won't be learning about that today. First, you have to learn how to implement if statements.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%After the header, just like methods, you have the body. All the code indented after the header is considered the body of the if-statement until the next unintented line of code.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%The body of an if statement only executes if the condition evaluates to yes (also known as true).%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%If the condition evaluates to no, then the block of code is skipped, and the program continues to execute linearly from the next unindented line of code.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%But what if you wanted to ask another question just because the answer to the previous question was no?%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%In that case, you could use an elif statement.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%An elif statement functions excatly like an if statement, except you write elif instead of if. %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%They can only be placed after if statements, and you can place as many after an if statement as you want. The questions will be asked in sequential order, and they will only be asked if the above answers are no.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%One thing to note, elif statements are optional, but you can only have them if you have an if statement.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, what if after asking several questions, if the answer is no to all of them, you want to preform one final task, as a result?%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%In this case, you would use an else statement.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%In essence, an else statement is a statement with a block of code that executes if and only if all of the if/elif blocks evaluate to no (or false). That is, an else statement will only execute if the answer to all of the previous questions are no.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%To create an else statement, simply type else followed by a colon. No condition is nesscessary, as if the computer reaches this point in the code, that block of code will execute regardless of the state of the program.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%That is, the header for an else statement is: else:%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Like the if statement, the elif statement, and the method, the indented code that follows the header comprises of the body of the else statement.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%The else statement is a power tool you could use.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%For instance, it could be used as a failsafe. An else statement could be placed at the end of an if/elif block in order to tell the user that perhaps their input did not match any of the desired criteria, or that the user should enter another seach query.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, let's move onto our last lesson for today: exception handling.%%0%%0
Blackboard.jpg%%Sensei_Sad.png%%Sensei.png%%Professor Sensei%%Exception handling is a crucial skill for any programmer so pay close attention.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Recall those countless times where you write code, and then you get those error messages.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, if the users of your program saw those messages, they would be really confused.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Furthermore, your program could crash, and this could mean a plane falling out of the sky, or a rocket exploding mid-air.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Luckily, Python provides a structure that will give you the opportunity to recover from such errors.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%This structure is known as the try-except-finally structure.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%It starts off with the try block. The header is simply try:%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%The body of the try block is code you want to execute.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%If, while executing the code, the program encounters an error, it would immediately jump out of the try block, and it would scan the except blocks.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%The except blocks catch any errors that are raised.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%That is, when an error arrises, it is identified and matched to the corresponding except case.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Then, the code inside the except block is executed.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%There are 2 possible headers for the except block. %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%1) except <error>:%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%2) except:%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%#1 excepts a specific type of error, and it is usually used to execude code that is relevant to correcting that error. #2 is used to catch all other errors that are not defined.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%However, on the off chance that the error is not defined in any except block, the red text that you usually see will still appear.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Finally, once the try-except blocks have been executed, Python will execute the code inside the finally block.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Finally has a header of finally: and all the code in its body will be run, as long as it is error-free!%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Well, young one, you now know about decision structures.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%It is a very powerful concept in programming, and it allows for you to skip code, which is vital to making good programs.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%You also learned how to handle errors, which is something that is really useful in making bug free code.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%It would be terrible if your users encountered error messages all the time!%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%So, young one, you now have everything you need to create fluent programs, that can execute differently according to different states, and programs that won't produce error messages, even if the data is incorrect.%%0%%0