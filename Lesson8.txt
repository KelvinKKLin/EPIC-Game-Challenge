Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Welcome back, young one, to another lesson in Python programming.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%You know know how to use decision structures, so now, let's apply that to loops.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%The goal of today's lesson will be to learn to repeat code until a certain condition is met.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Recall the for loop: a for loop repeats until it reaches the last element of a loop. That is, one can tell beforehand how many times that loop will execute.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Accordingly, it is called a definite loop.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%But now, we want to create loops that respond to the different states of the program, and terminate when a certain boolean expression (a.k.a a yes-or-no question) evaluates to false (or no).%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%With that, we can use something called an indefinite loop. %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%An indefinite loop is a loop that is ambigious as to how many times the loop will actually run, until the state of the program and the condition is given.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%There is no guarentee ahead of time regarding how many times the loop will iterate.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%In Python, indefinite loops are known as while loops. Their header is as follows: while <condition>:%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%This works excatly like an if statement: the body of the while loop will execute as long as the condition evaluates to true (the answer to the yes-or-no question is yes).%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, you can easily implement a for loop using a while loop by implementing an accumulator; however, this would be more dangerous as now you are giving the computer more privilage than it needs.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Remember, good programming practice calls for following the principle of least privilage. That is, each line of code should not be given more privilage than it needs.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, let's focus on conditions.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%At this point, young one, you should be competent enoungh to know that a boolean condition is simply a yes or no question.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%So, so far, we have only been creating simple boolean expressions.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%That is, boolean expressions with only one clause.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%But what if we want to ask multiple questions? With an if statement, we could put one if statement inside another, and this would allow us to ask 2 questions simutaneously; however, that is not good programming practice. Instead, one should create complex boolean expressions.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%To do so, we need 3 basic boolean operators: "not", "and", and "or".%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Not is simple. If something is true, it makes it false. If something is false, then not makes it true.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%For instance, not True = False, and not False = True.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%not (3<4) = False and not(3>4) = True%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%The and operator allows you to ask multiple questions at once. And would only return True if the answer to all your questions is True. If even one question in a million is false, it will return false.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%So in a statement like True and True and True and True and True, the value would be true. However, in a statement like True and True and True and True and False, the value would be False.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now with numbers: (3 < 4) and (5<6) and (6>2) evaluates to True, whereas (3<4) and (5>6) and not (6<3) evaluates to False.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Lastly, the "or" operator allows you to ask multiple questions, and it will return True if any of the questions evalutate to True.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%That is, False or False or False or False or True will evaluate to True, and True or False or False or False or True would still evaluate to True.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%With numbers, (3 < 4) or (5 > 6) will return True, where as (3<2) or (4<3) evaluates to False.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, let me explain to you a rather amazing property of Python.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%In Python, almost everything can be converted into a boolean. With numbers, 0 is False and everything else is True. With lists and strings, an empty list or string is False, and everything else is True.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%With that in mind, we will examine a concept known as short circuiting.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%That is, to make your program run faster, Python will evaluate your boolean expressions using the fewest steps possible.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%That is, first, Python will evaluate all the not operators.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Then, Python will evaluate all of the and statements. If any of the and statements evaluate to False, then Python will return that value.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%For instance, in the expression 0 and True, Python will evaluate 0, see that it is False, and return 0 since it knows that if even one boolean expression is False in a complex "and" statement, then the whole statement would be False.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Likewise, or evaluates each expression until one expression evaluates to True, or until it reaches the end of the expression, in which case it returns False.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%That is, in the expression 0 or 0 or [] or "" or 3 or "", Python would return the value 3 (which is True), and the last empty string would not be evaluated.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Short circuiting is a useful concept to know, as you can assign boolean conditions to variables.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now that you know all about boolean expressions, I'm sure that you are ready to write all sorts of loops and if statements.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%So before this lesson ends, and you go off to write loops, let's examine a couple typical types of loops.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%First, we have the interactive loop. This is a loop that repeats a certain portion of a code, until the user tells the loop to stop. This is commonly used in games, or in operating systems, where you don't want your program to stop until the user wants to stop using your program.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Next, there is the sentinel loop. This is a loop that continues to iterate until the program leaves a certain state. This is just like a sentenial who keeps a close watch on the condition of his castle. After every iteration of the loop, the program checks to see if the program is still at a specified state, and if so, then the program continues to repeat.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%We also have file loops, which allow you to process your file. The file loop iterates through each character of your text file, until it reaches the End-Of-File (EOF) character, where it terminates the loop. Convienently, Python does this for you whenever you open a file, and it loads the text into a buffer for you to use. You use a file loop every time you use the read(), readline(), and readlines() methods.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Finally, you have nested loops. Essentially, a nested loop is a loop inside a loop. Don't be afraid of these loops, as they execute just like any other loops. They allow y ou to repeat code while repeating code; however, with some practice, this can become second nature!%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%So, young one, now you know everything there is to know about loops. There are many practical uses for loops, and many creative ways that people can apply loops. If you want more examples, you can consult chapter 8 of your textbook.  %%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%But, like the old saying goes, practice makes perfect!%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%So go out, and create some of your own loops... and keep doing so while you are not comfortable with making loops.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Good luck, young one.%%0%%0
