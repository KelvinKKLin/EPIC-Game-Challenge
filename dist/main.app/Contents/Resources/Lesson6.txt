Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Welcome back, young one, to another lesson in Python programming.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Today, you will be introduced to the concept of modularity. %%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%I won't go into detail about what that is today, but bascially, we will be putting blocks of code together in order to simplify the coding, and to reduce code repetition.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now to do that, we are going to use something called functions.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, in the last level, you used operations like .setCoords(), and .draw(). %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Those are functions: they simplify code, so that you can use it by typing a single word, like setCoords() or draw(), instead of having to type out all the code that is required to perform those functions.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%You can think of methods or functions as a subprogram, a small program inside your bigger program.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, how do we create these functions?%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%First, we need to tell Python that we are creating a function. To do that, we use the keyword def.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%After def, we add the function name, round brackets, any parameters, and then a colon.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%So to create a function like printName, it would look like: def printName(name):%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%That line of code we just made is called the function's header or signature.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, name here is just a parameter.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%A parameter is essential external information that your method would need in order to function%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%So for our method, if we wanted to print a name, we would have to tell the method what name to print. It would be unreasonable to expect the method to automatically know what name we want to print. Therefore, name is a parameter in our method.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Next, after the header, every line of code belonging to the method should be indented. %%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%You can do anything you want in the body. You can print text, you can preform calculations, you can call other methods, you can even get your method to call itself inside the body!%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%One thing to note with functions is this concept called scope.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Essentially, scope determines the asscessability of a variable. That is, it determines when and where a variable can be used.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Variables defined inside methods die once the method terminates, so be sure to be weary of that. %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%If you want to keep the value of a variable found inside a method, you will need to use something called a return statement, which we will learn later on in this lesson.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%But first, let;s talk a little bit about how methods work.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%First, the calling program stops when it calls a methods.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Then, the parameters of the function get assigned values equal to supplied in the function call.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Third, the body of the function is executed.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%And finally, once the body terminates, the control returns to the point just after where the function was called.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, to talk more about the parameters of the function. You can access the value of the parameters by using the parameter names. So in our printName() function, we can print the value of the name parameter simply by using print name.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Now, the final topic for this lesson will be return statements. %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Before, we looked at the scope of variables, and we concluded that all variables die, once the method terminates. That is, once a method ends, all the variables are lost.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%So, what if we wanted to retain the value of variables?%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%We could use a return statement to send these values back to the caller. %%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%At the end of your method, you could include a statement like return value, where value is any value or variable, and that value would be returned to the caller.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%So if I wanted to return the value of a variable, name, I would use the statement return name.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Python also supports mutli-value return statements.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%That is, you can return more than  one value in each return statement.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%So if I wanted to return name and age, I could write return name, age, and those values would be returned in the corresponding order.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%To save these values, you would simply assign the value of the function to two variables from the caller. That is, if printName returned name and age, you could call the printName function: a, b = printName() in order to save the values of name and age into the variables a and b.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%Lastly, not every method needs a return statement, and methods can still be useful even if they do not have return statements.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%That is, there is a concept known as a side-effect, where the method would perform an action, and that action would inadvertely change the state of the program.%%0%%0
Blackboard.jpg%%Sensei_Nutral.png%%Sensei.png%%Professor Sensei%%That is, it could perhaps change a global variable (which is a variable that lies outside of the method), or it could output a message onto the screen.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Now, young one, you know all about methods.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%They are ultimately a way to condense code, to make it easier to read, and to avoid repetition.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%That being said, you should try to use methods whenever possible.%%0%%0
Blackboard.jpg%%Sensei_Happy.png%%Sensei.png%%Professor Sensei%%Now, young one, I wish you the best of luck in your studies.%%0%%0
